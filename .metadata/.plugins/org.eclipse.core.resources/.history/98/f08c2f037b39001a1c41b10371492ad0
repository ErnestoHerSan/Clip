package com.clip.apiTest;


import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

import com.clip.model.ApiResponseGetList;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class TestGetList {

	Logger Log = Logger.getLogger("TestGetList");
	String url="https://clip-automation-practice.free.beeceptor.com";

	@Test 
	public void requestGetListCode() {
		RestAssured.baseURI = url;
		RequestSpecification httpRequest = RestAssured.given();
		Response response = httpRequest.get("/getList");
		int statusCode = response.getStatusCode();
		Log.info("Código respuesta: "+statusCode);
		Assert.assertEquals(200, statusCode);
	}
	
	@Test
	public void requestGetListName() {
		RestAssured.baseURI = url;
		RequestSpecification httpRequest = RestAssured.given();
		Response response = httpRequest.get("/getList");
		int statusCode = response.getStatusCode();
		
		
		
		
		Log.info("Código respuesta: "+statusCode);
		Assert.assertEquals(200, statusCode);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public static void main(String[] args) {

        String json1 = "[{\"name\":ernesto," + "\"surname\":\"Iniesta\"," + "\"age\":\"18\"}]";

        JsonParser parser = new JsonParser();

        // Obtain Array
        JsonArray gsonArr = parser.parse(json1).getAsJsonArray();

        // for each element of array
        for (JsonElement obj : gsonArr) {

            // Object of array
            JsonObject gsonObj = obj.getAsJsonObject();

            // Primitives elements of object
            
            String name = gsonObj.get("name").getAsString();
            String surname = gsonObj.get("surname").getAsString();
            int age = gsonObj.get("age").getAsInt();

 /*           // List of primitive elements
            JsonArray demarcation = gsonObj.get("demarcation").getAsJsonArray();
            List listDemarcation = new ArrayList();
            for (JsonElement demarc : demarcation) {
                listDemarcation.add(demarc.getAsString());
            }
*/
            // Object Constructor
            ApiResponseGetList iniesta = new ApiResponseGetList(name, surname,age);
            System.out.println("JSON:" + iniesta);
        }
    }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@Ignore
	@Test 
	public void requestGetListCodePerson() {
		RestAssured.given().get(url+"/getList").then().statusCode(200);
	}









/*	@Ignore
	@Test
	public void requestGetListDos() {
		//RestAssured.baseURI = "https://clip-automation-practice.free.beeceptor.com/getList";

		given().get("https://clip-automation-practice.free.beeceptor.com/getList").
			then().statusCode(200);


//		System.out.println("Response :" + response.asString());
//		System.out.println("Status Code :" + response.getStatusCode());
	}



	/*	given().
	parameters("firstName", "John", "lastName", "Doe").
when().
	post("/greetXML").
then().
	body("greeting.firstName", equalTo("John")).
	body("greeting.lastName", equalTo("Doe"));
	 */


	/*	@Test
	public void testGetAvailableBooks() {
		get("https://api.bitso.com/v3/available_books/").then().body("success", equalTo(true));
	}

	@Test
	public void getTickerByBook() {
		given().param("book", "xrp_mxn").get("https://api.bitso.com/v3/ticker").then().statusCode(200);
	}

	@Test
	public void validateGetTickerPrice() {
		given().param("book", "xrp_mxn").get("https://api.bitso.com/v3/ticker").then().statusCode(200).and()
				.body("payload.ask", notNullValue());
	}
	 */
}
